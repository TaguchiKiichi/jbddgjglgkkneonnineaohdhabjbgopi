let checkedUrl=new Set,suppressBeforeUnloadFlag=!1;function checkRuntimeLastError(){chrome.runtime.lastError}window.addEventListener("beforeunload",(e=>{suppressBeforeUnloadFlag&&(e.stopImmediatePropagation(),suppressBeforeUnloadFlag=!1)}));const connectCheckUrl=()=>{chrome.runtime.connect({name:"checkUrl"}).onDisconnect.addListener((()=>{checkRuntimeLastError(),checkedUrl.has(window.location.href)||connectCheckUrl()}))};connectCheckUrl();const sendRecheckUrlMessage=e=>{const r=chrome.runtime.connect({name:"recheckUrl"});r.onDisconnect.addListener((()=>{checkedUrl.has(e)||sendRecheckUrlMessage(e)})),r.postMessage({recheckUrl:e})},sendBeforeUnloadSuppressedMessage=e=>{const r=chrome.runtime.connect({name:"suppressBeforeUnload"});r.onDisconnect.addListener((()=>{checkRuntimeLastError(),sendBeforeUnloadSuppressedMessage(e)})),r.postMessage({suppressBeforeUnload:e})},backForwardCacheUrl=()=>{chrome.runtime.connect({name:"backForwardCacheUrl"}).onDisconnect.addListener((()=>{checkRuntimeLastError(),checkedUrl.has(window.location.href)||backForwardCacheUrl()}))};chrome.runtime.onConnect.addListener((e=>{e.onMessage.addListener(handleMessage)})),window.addEventListener("pageshow",(e=>{e.persisted&&backForwardCacheUrl()}));const handleMessage=e=>{if(e.isActiveTabCheck){const e=window.location.href;return checkedUrl.delete(e),void sendRecheckUrlMessage(e)}if(e.suppressBeforeUnload)return suppressBeforeUnloadFlag=!0,void sendBeforeUnloadSuppressedMessage(e.suppressBeforeUnload);e.recheckUrl?checkedUrl.has(e.recheckUrl)||sendRecheckUrlMessage(e.recheckUrl):e.fragmentUpdatedUrl?checkedUrl.has(e.fragmentUpdatedUrl)||sendRecheckUrlMessage(e.fragmentUpdatedUrl):e.passUrl&&navigator.onLine&&checkedUrl.add(e.passUrl)};window.addEventListener("online",(()=>{checkedUrl.has(window.location.href)||connectCheckUrl()}));